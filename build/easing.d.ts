export declare type Easing = (k: number) => number;
export declare function Linear(k: number): number;
export declare function QuadraticIn(k: number): number;
export declare function QuadraticOut(k: number): number;
export declare function QuadraticInOut(k: number): number;
export declare function CubicIn(k: number): number;
export declare function CubicOut(k: number): number;
export declare function CubicInOut(k: number): number;
export declare function QuarticIn(k: number): number;
export declare function QuarticOut(k: number): number;
export declare function QuarticInOut(k: number): number;
export declare function QuinticIn(k: number): number;
export declare function QuinticOut(k: number): number;
export declare function QuinticInOut(k: number): number;
export declare function SineIn(k: number): number;
export declare function SineOut(k: number): number;
export declare function SineInOut(k: number): number;
export declare function ExponentialIn(k: number): number;
export declare function ExponentialOut(k: number): number;
export declare function ExponentialInOut(k: number): number;
export declare function CircularIn(k: number): number;
export declare function CircularOut(k: number): number;
export declare function CircularInOut(k: number): number;
export declare function ElasticIn(k: number): number;
export declare function ElasticOut(k: number): number;
export declare function ElasticInOut(k: number): number;
export declare function BackIn(k: number): number;
export declare function BackOut(k: number): number;
export declare function BackInOut(k: number): number;
export declare function BounceIn(k: number): number;
export declare function BounceOut(k: number): number;
export declare function BounceInOut(k: number): number;
